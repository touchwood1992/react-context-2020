{"version":3,"sources":["contexts/TodoContext/TodoContext.js","components/Pages/Todo/TodoList/TodoItem/TodoItem.js","components/Pages/Todo/TodoList/TodoList.js","components/Pages/Todo/TodoForm/TodoForm.js","components/Pages/Todo/Todo.js","components/Common/Header/Header.js","components/Common/Footer/Footer.js","App.js","serviceWorker.js","contexts/TodoContext/todoContextReducer.js","contexts/TodoContext/Types.js","contexts/TodoContext/TodoContextState.js","index.js"],"names":["TodoContext","createContext","TodoItem","props","todoContext","useContext","item","name","email","id","className","onClick","removeTodoItem","TodoList","allTodos","length","map","t","key","TodoForm","useState","uuidv4","state","setState","bindForm","e","target","value","onSubmit","preventDefault","trim","addTodo","alert","htmlFor","type","placeholder","onChange","Todo","Header","Footer","App","Boolean","window","location","hostname","match","action","arrayToStore","todos","payload","localStorage","setItem","JSON","stringify","getItem","allItems","objState","parse","oldState","indexOfItem","indexOf","i","splice","TodoState","useEffect","dispatch","useReducer","TodoReducer","loading","add","Provider","todo","children","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a100b77.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\nconst TodoContext = createContext();\r\nexport default TodoContext;\r\n","import React, { Fragment, useContext } from \"react\";\r\nimport { FaTimes } from \"react-icons/fa\";\r\nimport TodoContext from \"../../../../../contexts/TodoContext/TodoContext\";\r\nconst TodoItem = (props) => {\r\n  const todoContext = useContext(TodoContext);\r\n\r\n  const { name, email, id } = props.item;\r\n  return (\r\n    <Fragment>\r\n      <li className=\"list-group-item\">\r\n        <div>Name : {name}</div>\r\n        <div>Email : {email}</div>\r\n        <div>\r\n          <FaTimes onClick={() => todoContext.removeTodoItem(id)} />\r\n        </div>\r\n      </li>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default TodoItem;\r\n","import React, { useContext } from \"react\";\r\nimport TodoItem from \"./TodoItem/TodoItem\";\r\nimport TodoContext from \"../../../../contexts/TodoContext/TodoContext\";\r\nconst TodoList = () => {\r\n  const todoContext = useContext(TodoContext);\r\n  return (\r\n    <ul className=\"list-group\">\r\n      {todoContext.allTodos.length === 0 ? (\r\n        <div>No todo found.</div>\r\n      ) : (\r\n        todoContext.allTodos.map((t) => <TodoItem key={t.id} item={t} />)\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\nexport default TodoList;\r\n","import React, { useState, useContext } from \"react\";\r\nimport TodoContext from \"../../../../contexts/TodoContext/TodoContext\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nconst TodoForm = () => {\r\n  const todoContext = useContext(TodoContext);\r\n\r\n  const [state, setState] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    id: uuidv4(),\r\n  });\r\n\r\n  const bindForm = (e) => {\r\n    setState({ ...state, [e.target.name]: e.target.value });\r\n  };\r\n  const addTodo = (e) => {\r\n    e.preventDefault();\r\n    if (state.name.trim() === \"\" || state.email.trim() === \"\") {\r\n      alert(\"All fields are required\");\r\n      return;\r\n    }\r\n    todoContext.addTodo({ ...state });\r\n    setState({\r\n      name: \"\",\r\n      email: \"\",\r\n      id: uuidv4(),\r\n    });\r\n  };\r\n  return (\r\n    <form className=\"form-horizontal\" onSubmit={addTodo}>\r\n      <div className=\"form-group\">\r\n        <label className=\"control-label col-sm-2\" htmlFor=\"name\">\r\n          Name:\r\n        </label>\r\n        <div className=\"col-sm-10\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"name\"\r\n            placeholder=\"Enter Name\"\r\n            onChange={bindForm}\r\n            value={state.name}\r\n            name=\"name\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label className=\"control-label col-sm-2\" htmlFor=\"email\">\r\n          Email:\r\n        </label>\r\n        <div className=\"col-sm-10\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"email\"\r\n            placeholder=\"Enter Email\"\r\n            onChange={bindForm}\r\n            value={state.email}\r\n            name=\"email\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <div className=\"col-sm-offset-2 col-sm-10\">\r\n          <button type=\"submit\" className=\"btn btn-dark\">\r\n            Add Todo\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nexport default TodoForm;\r\n","import React from \"react\";\r\nimport TodoList from \"./TodoList/TodoList\";\r\nimport TodoForm from \"./TodoForm/TodoForm\";\r\nconst Todo = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 mx-auto\">\r\n          <TodoForm />\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <h4 className=\"mt-2 mb-2\">All todos</h4>\r\n              {<TodoList />}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Todo;\r\n","import React from \"react\";\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"text-center m-2\">\r\n      <nav className=\"navbar\">\r\n        <div className=\"container\">Head Section</div>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"m-2\">\r\n      <div className=\"container\">Footer section</div>\r\n    </footer>\r\n  );\r\n};\r\nexport default Footer;\r\n","import React from \"react\";\nimport Todo from \"./components/Pages/Todo/Todo\";\nimport Header from \"./components/Common/Header/Header\";\nimport Footer from \"./components/Common/Footer/Footer\";\nconst App = () => {\n  return (\n    <div id=\"site-container\">\n      <Header />\n      <main id=\"main-content\">\n        <Todo></Todo>\n      </main>\n      <Footer />\n    </div>\n  );\n};\nexport default App;\n\n/*\nimport React, { Fragment, createContext, useContext, useState } from \"react\";\nimport \"./App.css\";\nconst AppContext = createContext(\"hhhhhh\");\n\nconst HeaderInner = () => {\n  const [appcontext, changeTheme] = useContext(AppContext);\n\n  return (\n    <Fragment>\n      Header Inner {appcontext.color}\n      <button\n        onClick={() => {\n          const newColor = appcontext.color === \"light\" ? \"dark\" : \"light\";\n          changeTheme({ ...appcontext, color: newColor });\n        }}\n      >\n        Change Name\n      </button>\n    </Fragment>\n  );\n};\n\nconst Header = (props) => {\n  return (\n    <div>\n      <HeaderInner></HeaderInner>\n    </div>\n  );\n};\n\nconst App = () => {\n  const themeHook = useState({ color: \"light\" });\n\n  return (\n    <AppContext.Provider value={themeHook}>\n      <Fragment>\n        <AppContext.Consumer>\n          {(a) => <Header>{a[0].color}</Header>}\n        </AppContext.Consumer>\n      </Fragment>\n    </AppContext.Provider>\n  );\n};\nexport default App;\n*/\n\n// ==================================================================================\n/*\n\n\nimport React, { Fragment, createContext, useContext, useState } from \"react\";\nimport \"./App.css\";\nconst AppContext = createContext();\n\nconst HeaderInner = () => {\n  const appcontext = useContext(AppContext);\n  return (\n    <Fragment>\n      Header Inner {appcontext.theme}\n      <button\n        onClick={() =>\n          appcontext.changeName(appcontext.theme === \"light\" ? \"dark\" : \"light\")\n        }\n      >\n        Change Name\n      </button>\n    </Fragment>\n  );\n};\n\nconst Header = () => {\n  return (\n    <div>\n      <HeaderInner></HeaderInner>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [state, SetState] = useState({ theme: \"light\" });\n  const changeName = (name) => {\n    SetState({ ...state, theme: name });\n  };\n\n  return (\n    <AppContext.Provider value={{ theme: state.theme, changeName }}>\n      <Fragment>\n        <AppContext.Consumer>\n          {(a) => (\n            <div className={a.theme}>\n              <Header></Header>\n            </div>\n          )}\n        </AppContext.Consumer>\n      </Fragment>\n    </AppContext.Provider>\n  );\n};\nexport default App;\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD_TODO, LOAD_ALL_TODO, REMOVE_TODO } from \"./Types\";\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case ADD_TODO:\r\n      const arrayToStore = {\r\n        ...state,\r\n        todos: [...state.todos, action.payload],\r\n      };\r\n      localStorage.setItem(\"alltodos\", JSON.stringify(arrayToStore));\r\n\r\n      return arrayToStore;\r\n\r\n    case LOAD_ALL_TODO:\r\n      if (localStorage.getItem(\"alltodos\")) {\r\n        const allItems = localStorage.getItem(\"alltodos\");\r\n        const objState = JSON.parse(allItems);\r\n        return { ...objState };\r\n      }\r\n      return { ...state };\r\n    case REMOVE_TODO:\r\n      const oldState = { ...state };\r\n      const indexOfItem = oldState.todos.indexOf(\r\n        (i) => i.id === action.payload\r\n      );\r\n      if (indexOfItem) {\r\n        oldState.todos.splice(indexOfItem, 1);\r\n        localStorage.setItem(\"alltodos\", JSON.stringify(oldState));\r\n        return { ...oldState };\r\n      }\r\n      return { ...state };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","export const ADD_TODO = \"ADD_TODO\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\nexport const UPDATE_TODO = \"UPDATE_TODO\";\r\nexport const GET_TODO = \"GET_TODO\";\r\nexport const ALL_TODO = \"ALL_TODO\";\r\nexport const LOAD_ALL_TODO = \"LOAD_ALL_TODO\";\r\n","import React, { useReducer, useEffect } from \"react\";\r\nimport TodoContext from \"./TodoContext\";\r\nimport TodoReducer from \"./todoContextReducer\";\r\nimport { ADD_TODO, LOAD_ALL_TODO, REMOVE_TODO } from \"./Types\";\r\n\r\nconst TodoState = (props) => {\r\n  let defaultState = {\r\n    todos: [],\r\n    loading: false,\r\n    add: true,\r\n  };\r\n\r\n  //Load all todos from localstorage\r\n  useEffect(() => {\r\n    //get values from localstorage\r\n    dispatch({\r\n      type: LOAD_ALL_TODO,\r\n    });\r\n  }, []);\r\n\r\n  const [state, dispatch] = useReducer(TodoReducer, defaultState);\r\n\r\n  const addTodo = (todo) => {\r\n    dispatch({ type: ADD_TODO, payload: todo });\r\n  };\r\n  const removeTodoItem = (id) => {\r\n    dispatch({ type: REMOVE_TODO, payload: id });\r\n  };\r\n\r\n  return (\r\n    <TodoContext.Provider\r\n      value={{ allTodos: state.todos, addTodo, removeTodoItem }}\r\n    >\r\n      {props.children}\r\n    </TodoContext.Provider>\r\n  );\r\n};\r\n\r\nexport default TodoState;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport TodoState from \"./contexts/TodoContext/TodoContextState\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoState>\n      <App />\n    </TodoState>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}